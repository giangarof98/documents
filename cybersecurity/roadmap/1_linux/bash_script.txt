-Bash Scriptt

    A Bash script is a script written in the Bash (Bourne-Again SHell) language, 
        which is a Unix/Linux shell that provides a command-line interface for interacting with the operating system.

        Bash scripts are used to automate tasks, run commands, 
        and perform system administration tasks in Linux/Unix-based systems.

        A Bash script is a plain text file that contains a series of commands, 
        statements, and functions that are executed in sequence by the Bash interpreter. 
        The script can also accept input from the user or arguments passed to it on the command line.

        Line 1: #!/bin/bash
        Line 2: # This line is a comment and will not be executed.
        Line 3: target_dir="/home/fstack"
        Line 4: echo "Directory Listing of: $target_dir"
        Line 5: ls -l $target_dir

        Line 1 (shebang): The shebang is a has (#) and a bang (!) combined. 
            This must be on the very first line with no spaces before it. 
            The shebang tells the interactive shell that this script should be interpreted as bash commands.
        Line 2: Any line that begins with a "#" is a comment and will not be executed. Comments are used to explain sections of code.
        Line 3: This is the assignment of a variable called target_dir. 
            Notice there are no spaces around the "=". It is a good idea to enclose the value 
            of your variable with quotes, especially if you have a space or special character in the variable.
        Line 4: This line is using echo to output text to the user. This is similar to a 
            print statement in other languages. Notice the "$" in front of target_dir. This is required when using a variable. 
        Line 5: This is a simple long listing command. Notice the use of the target_dir variable again. 
        
        Exercise solution
            #!/bin/bash
            echo 'creating directories'
            mkdir ops host
            cd host
            mkdir configs
            mkdir groups
            mkdir logs
            mkdir packages
            mkdir users
            echo 'copy syslog file'
            cp /var/log/syslog ./logs
            echo 'listing packages...' 
            dpkg -l > ./packages/installed.txt

    Comparision Operator

        # val1 -eq val2 returns true if the values are equal
        # val1 -ne val2 returns true if the values are not equal
        # val1 -gt val2 returns true if val1 is greater than val2
        # val1 -ge val2 returns true if val1 is greater or equal than val2
        # val1 -lt val2 returns true if val1 is less than val2
        # val1 -le val2 returns true if val1 is less or equal than val2

    Variables
        are used to store data that can be accessed and manipulated by the shell or other programs.
        used to store simple values such as strings and numbers, as well as more complex data types 
            such as arrays and associative arrays.
        
        Environment variables: These are variables that are set by the system or by 
        user configuration and can be accessed by any program or script running in the shell.

        Shell variables: These are variables that are specific to the current shell and 
        can only be accessed by the current shell or any child processes that it spawns.

        #user input 
            The read command waits for the user to input text and stores it in a variable.

            example1
                name="your name"
                echo "i'm $name" || echo "i'm ${name}"
            
            example2
                echo "what is your name?"
                read name
                echo "welcome, $name"

            example3
                read -p "what is your name?" name
                echo "welcome, name

    Conditionals
        used to execute different blocks of code depending on whether a certain condition is true or false.
        There are several ways to create conditionals in Bash, including using the if statement, 
            the case statement, and the ternary operator.

            example1
                if condition; then
                # Code to execute if condition is true
                fi

            example2
                x=15
                if [ $x -gt 10 ]; then
                    echo "x is greater than 10"
                fi
            
            example3
                x=7
                if [ $x -gt 10 ]; then
                    echo "x is greater than 10"
                elif [ $x -gt 5 ]; then
                    echo "x is greater than 5 but less than or equal to 10"
                else
                    echo "x is less than or equal to 5"
                fi

            case statement


            Ternary operator

    Loops
        used to repeat a block of code multiple times. 
        There are several types of loops available in Bash, including the for loop, the while loop, and the until loop.

            example1
            for i in 1 2 3 4 5; do
            echo $i
            done

            example2
            for i in {1..5}; do
            echo $i
            done    

            example3
            while condition; do
            # Code to execute while the condition is true
            done    

    function

        functions are used to group a set of commands together and give them a name so that they 
            can be called and executed multiple times throughout a script.

            example1
                greeting() {
                    echo "Hello, world!"
                }
                greeting

