Variable: is a value that can change depending on conditions or on information passed to the program.
Program: consists of instructions that tell the computer what to do and data that the program uses when running.

Data types: Variables can store data of different types, and different types can complete different tasks.
    integers:   zero, positive or negative whole numbers. They can be of any length, e.g. 0, 100, -10. 
    floats:     represent the floating point number. These are numbers with decimal points.
    strings.    collections of alphabets, words, or other characters that are enclosed in quotation marks.

Casting: change the data type of a variable.
            Example:
            my_num = "5"
            print(type(int(my_num)))
            output = <class 'int'>
            #Notice the initial type of my_num is str

            type(int())
            type(str())

Aritmethic operators
+ | - | * | / | %

Getting user input
    using input()
    q = input('Provide your name')
    output -> [your name]

    Code Example:
        my_name = input('My name is:')
        neighbors_name = input('My neighbor name is:')
        my_age = input('my age is')
        neighbors_age = input('my neighbor age is:')
        total_years = int(my_age) + int(neighbors_age)
        print("I am " + my_name + " and my neighbors name is " + neighbors_name)
        print("together our age is " + str(total_years))

Errors: 
    A Python program terminates as soon as it encounters an unhandled error.
        Fortunately, the program will print the cause of the error and the line in the script that caused it. 
            This can help us debug and correct our code.

        An error caused by not following the proper structure (syntax) of the language is called a syntax error or parsing error.
        Another common mistake is trying to print or do an action on a variable without assigning a value to it.
        Another common error is trying to add or concatenate two variables with different data types.
        ` Invalid syntax. Perhaps you forgot a comma? `, indicates there's a concatenate error or quotation mark opening and closing in the code

String Methods
    In Python have a list of methods that are available. 
    These methods help manipulate and edit strings, which is extremely helpful in working with logs. 
    String methods help us split strings, count the number of characters in a string, and check if a string is a number, 
    alphanumeric character or a letter.

    The way we use a string method is to write variable.method()

    split(): Splits the string at the specified separator, and returns a list. We will cover lists in depth in a later lesson.
    len() :Returns the length of a string
    count(): Returns the number of times a specified value occurs in a string
    index():Returns the index of a specific character in a string
    replace(): Replaces a specified phrase with another specified phrase
    strip() : Deletes all white spaces

    isalnum(): Returns True if all characters in the string are alphanumeric. Includes special characters
    isalpha(): Returns True if all characters in the string are in the alphabet
    isascii(): Returns True if all characters in the string are ascii characters
    isdecimal(): Returns True if all characters in the string are decimals
    isnumeric(): Returns True if all characters are numeric
    isdigit(): Returns True if all characters in the string are digits
    islower(): Returns True if all characters in the string are lower case
    isupper(): Returns True if all characters in the string are upper case

    String Indexing
        Strings are ordered sequences of character data. 
        Indexing allows you to access individual characters in a string directly by using a numeric value. 
        String indexing is zero-based; the first character in the string has index 0, the next is 1, and so on
    
    String Slicing
        Used to extract a substring.
        variable="Hello World"
        variable[0:5]
        output -> Hello

List Methods
    Variables can hold single pieces of data. 
    Lists, on the other hand, can hold multiple pieces of data within a variable.
    A list in Python is a collection of elements put into an array. 
    A list element can be of any data type, such as strings, integers, floats and even other lists.
        Numbers = [10, 15, 3.4, 5]
        Items = [“coat”, “shoes”, “socks”]
        Info = [“they”, 22, “new york”]
        All_info = [“they”, 22, “new york”], [“she”, 28, “quito”]

        append(): Adds an element at the end of the list
        clear(): Removes all elements from the list
        count(): Returns the number of elements with the specified value
        index(): Returns the index of the specified value
        remove(): Removes the first item with the specified value
        pop(): Removes the element with the specified position form the list
        insert(): Inserts an element at the specified position
        reverse(): Reverses the list
        len(): Get the length of the list
        sort(): Sort the list alphabetically

Conditionals
    Checks if a condition meets a criteria and if it does, it will execute some code.
    If another criteria is met, then another piece of code is executed instead, and so on.
    Syntax 
        if (condition):
            //Piece of code to execute
        elif (condition):
            //Piece of code
        else:
            //Another piece of code to execute
    
    The statement after the `if` is called the condition. 
        * If it is true, then the code block below it will execute. 
        * If it is not true, then the code block after `else` will execute.
        * At the end of the conditional statement there will always be a colon.

Loops
    A for loop is used for iterating over a sequence 
        (that is either a list, a tuple, a dictionary, a set, or a string).
    Is a Block of code that you wanted to repeat a fixed number of times.

Counters
    In some cases we need to count how many times a loop occurs or how many times a condition in the loop is met. 
    In order to do that we use counters.
    Before we use them we need to initialize them. This means we declare an empty or zero value variable: counter = 0
    Each time we loop we will add 1 to the counter: counter = counter + 1
    Another way to write this is: counter += 1. Or using: counter++

Functios
    Keyword, def, marks the start of the function header.
    A function name, function_name in this case, uniquely identifies the function.
    Parameters (arguments) through which we pass values to a function. They are optional.
    A colon, :, to mark the end of the function header.
    One or more valid Python statements that make up the function body. Statements must have the same indentation level.
    An optional return statement to return a value from the function.

    Syntax
        //Without arguments
        def greet():
            print('hello')
        greet()

        //With arguments
        def greet(name):
            print('hello ' + name)
        greet('mark')

        An argument is simply the variable. In the above case, “name” is the parameter. 
        The argument is the specific value that you will pass when calling the function.

        Functions can contain multiple parameters that, in turn, accept multiple parameters.

    Return statement
        In the same way that you can pass values into functions as arguments, you can also retrieve values from functions via the return keyword. 
        Instead of printing the result to the screen, you can return it into the program.

        def sum(x,y):
            return x * y

        The return statement is used to conclude and exit a function and go back to the place from where it was called.
        You can only have one return statement in a function.
        Whichever value gets returned will be passed back into the main script.
        It’s common to store the result of a return statement within a variable so that it can be easily referred to and reused in later parts of the program.

Modules
    A module in Python is a file that contains a set of pre-defined code for related functions and variables.
    One advantage of using modules is that instead of having to write custom, complicated code ourselves, 
    modules save us time by providing pre-created methods and functions.

    If you want to get a list of all of the built-in modules, use the help("modules") command.

    There are two ways you can import a module into your program:
        Using Import Statement:
            import <module_name>
            import os
            After you import this module you can access this method and the other methods in the module that are available to you.

        Using the from < > import < > Statement:
            from <module_name> import <function_name>
            from os import *
            without having to use os. appended right before the function name.

        OS module:
            os.getcwd()
            os.mkdir()
            os.listdir()
            os.path.exists()
            os.remove()

    Installing Custom Modules
        In some cases, modules will not be pre-built on your systems.

        python3 -m pip install <Module_Name>

The Main Function
    Is like the entry point of a program. However, the Python program runs the code right from the first line.

    The best practice is to
        Write the import statement first
        Then write all other functions (except the main function). These are called auxiliary functions.
        Lastly, write the main function.
