Setup
    In Java, every application begins with a class name, and that class must match the filename.
    A class should always start with an uppercase first letter.
    Java is case-sensitive: "MyClass" and "myclass" has different meaning.
        The main() method is required to start the program.
        Any code inside the main() method will be executed.
        In Java, "main()" is a special method that serves as the entry point of a Java program.
        Each code statement must end with a semicolon (;).

Variables

    Syntax: type variableName = value;

    Variables are containers for storing data values.
    The Java variables have mainly three types: Local, Instance and Static.
    Variable in Java is a data container that stores the data values during Java program execution.
    Every variable is assigned a data type, which designates the type and quantity of values it can hold.
    Variable is a memory location name of the data.

    Operators
        + | - | * | / | % | ++ | --
        == | != | > | < | <= | >=
        && | ! | || 

    Identifiers
        All Java variables must be identified with unique names.
        These unique names are called identifiers.
        Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).
        It is recommended to use descriptive names in order to create understandable and maintainable code.
        The general rules for naming variables are:
            Names can contain letters, digits, underscores, and dollar signs
            Names must begin with a letter
            Names should start with a lowercase letter and it cannot contain whitespace
            Names can also begin with $ and _ (but we will not use it in this tutorial)
            Names are case sensitive ("myVar" and "myvar" are different variables)
            Reserved words (like Java keywords, such as int or boolean) cannot be used as names

    Data Types are divided into two group:
        Primitive - byte, short, int, long, float, double, boolean and char
        Non-Primitive - String, Arrays and Classes

        Non-primitive data types are called reference types because they refer to objects.
        The main difference between primitive and non-primitive data types are:
            Primitive types are predefined (already defined) in Java. Non-primitive types are created by the programmer and is not defined by Java (except for String).
            Non-primitive types can be used to call methods to perform certain operations, while primitive types cannot.
            A primitive type has always a value, while non-primitive types can be null.
            A primitive type starts with a lowercase letter, while non-primitive types starts with an uppercase letter.
            The size of a primitive type depends on the data type, while non-primitive types have all the same size.

        The goal of a program is to do something with data, or in other words, stuff you put into your program.
        Your program uses a variable to manipulate the data.
        More specifically, it is a container used to store a piece of data that your program may need for its processing.

        A variable is composed of three elements: name, value, and type.

        To declare a constant in Java, you need to use the keyword "final"; othersiwe, just declare String.
        To print something, must be include within a class.
        Char is used to store one character; with String you can store any text
            char myChar = 'a';
            String myString = "My string";
            *notice the single and double quotes.

        //EXAMPLE
                    public class test {
                        public static void main(String[] args) {
                            int age = 25;
                            String name = "Jhon Doe";
                            System.out.println("i'm " + name + ", i'm " + age + " years old");
                        }
                    }


        You can also declare a variable without assigning the value, and assign the value later
            int num;
            num = 5
        if you assign a new value to an existing variable, it will overwrite the previous value
            int num = 5;
            num = 10;
        If you don't want others to overwrite existing values, use the final keyword 
            final int num = 5;

    Type casting
        Process of converting a variable of one data type to another data type.
        Java supports two types of type casting: implicit and explicit.
            Implicit type casting:
                Occurs when Java automatically converts a value of one data type to another data type.
                If you assign an int value to a float variable, Java will automatically convert the int 
                    to a float without the need for an explicit cast.
            Explicit type casting:
                Requires the programmer to manually convert a value of one data type to another 
                    data type using a cast operator.
                if you want to assign a double value to an int variable, you must explicitly cast 
                    the double value to an int using the cast operator.

String
    Strings are used for storing text.
    A String variable contains a collection of characters surrounded by double quotes.
    A String in Java is actually an object, which contain methods that can perform certain operations on strings.
    Java counts positions from zero: 0 is the first position in a string, 1 is the second, 2 is the third ...
    String Methods:
        .length()
        .concat()
        .toUpperCase()
        .toLoweCase()
        .indexOf()

        Special characters
            \'	Single quote
            \"	Double quote
            \\	Backslash
            \n	New Line	
            \r	Carriage Return	
            \t	Tab	
            \b	Backspace	
            \f	Form Feed

Math
    Mathematical tasks on numbers.

    Methods
        .math()
        .min()
        .sqrt()
        .abs()
        .random()

Boolean
    Only have one of two values, like:
        YES / NO
        ON / OFF
        TRUE / FALSE
    A boolean type is declared with the boolean keyword and can only take the values true or false

Conditionals
    Java supports the usual logical conditions from mathematics.
    Use these conditions to perform different actions for different decisions.
    Java has the following conditional statements:
        Use     if          to specify a block of code to be executed, if a specified condition is true
        Use     else        to specify a block of code to be executed, if the same condition is false
        Use     else if     to specify a new condition to test, if the first condition is false
        Use     switch      to specify many alternative blocks of code to be executed

    Syntax
        if (condition){             //If first condition is true
            //code execution
        } else if (condition){      //If second condition is true and first condition false
            //code execution
        } else {                    //otherwise ... if all conditions are false
            //code execution
        }
    
    Ternary operator
        Shorthand way of writing an if-else statement in a single line. 
        It is also known as the conditional operator.
        Syntax
        (condition) ? valueIfTrue : valueIfFalse

    Switch
        Instead of writing many if..else statements, you can use the switch statement.
        The switch statement selects one of many code blocks to be executed.

        The switch expression is evaluated once.
        The value of the expression is compared with the values of each case.
        If there is a match, the associated block of code is executed.
        When Java reaches a break keyword, it breaks out of the switch block.
            This will stop the execution of more code and case testing inside the block.
        The default keyword specifies some code to run if there is no case match.
            Note that if the default statement is used as the last statement in a switch block, it does not need a break.
        Syntax
            switch(expression) {
                case x:
                    // code block
                    break;
                case y:
                    // code block
                    break;
                default:
                    // code block
            }

Loops
    Loops can execute a block of code as long as a specified condition is reached.

    While Loop
        The while loop loops through a block of code as long as a specified condition is true
        Syntax
            int i = 0;
            while (i < 5) {
                System.out.println(i);
                i++;
            }

    Do/while Loop
        Is a variant of the while loop.
        Will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.
        Syntax
            int i = 0;
            do {
                System.out.println(i);
                i++;
            }
            while (i < 5);

    For Loop
        Control structure that allows you to execute a block of code repeatedly for a fixed number of times. 
        Syntax
            for (statement 1; statement 2; statement 3) {
                // code block to be executed
            }
            Statement 1 is executed (one time) before the execution of the code block.
            Statement 2 defines the condition for executing the code block.
            Statement 3 is executed (every time) after the code block has been executed.

            for (int i = 0; i < 5; i++) {
                System.out.println(i);
            }   
            Statement 1 sets a variable before the loop starts (int i = 0).
            Statement 2 defines the condition for the loop to run (i must be less than 5). 
                If the condition is true, the loop will start over again, if it is false, the loop will end.
            Statement 3 increases a value (i++) each time the code block in the loop has been executed.

        Nested Loops
            Place a loop inside another loop. This is called a nested loop.
            The "inner loop" will be executed one time for each iteration of the "outer loop"
            Example
            for(int i = 0; i < 5; i++){
                System.out.println("out " + i);
                for(int j = 0; j < 5; j = j + 2){
                    System.out.println("in " + j);
                }
            }

    For Each
        Used exclusively to loop through elements in an array
        Syntax
            for (type variableName : arrayName) {
                // code block to be executed
            }  
    
    Break / continue
        Break is used to "jump out" of a switch statement.
        The break statement can also be used to jump out of a loop.
        The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.
        You can also use break and continue in while loops

Array
    Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each value.
    To declare an array, define the variable type with square brackets:
        String[] arrayName;
        String[] cars = {"Volvo", "BMW", "Ford", "Mazda"};
        int[] myNum = {10, 20, 30, 40};

    Array indexes start with 0: [0] is the first element. [1] is the second element, etc.

    Multidimensional Arrays
        A multidimensional array is an array of arrays.
        Multidimensional arrays are useful when you want to store data as a tabular form, like a table with rows and columns.
        To create a two-dimensional array, add each array within its own set of curly braces:
            int[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} };

Methods
    A method is a block of code which only runs when it is called.
    You can pass data, known as parameters, into a method.
    Methods are used to perform certain actions, and they are also known as functions.
    Why use methods? To reuse code: define the code once, and use it many times.
    
    A method must be declared within a class. 
    It is defined with the name of the method, followed by parentheses (). 

    public class Main {
        static void myMethod() {
            // code to be executed
        }

        public static void main(String[] args){
            myMethod();
        }
    }

    Parameters and arguments
        Parameters act as variables inside the method.
        Parameters are specified after the method name, inside the parentheses.
        when you are working with multiple parameters, the method call must have the same number 
            of arguments as there are parameters, and the arguments must be passed in the same order.

            public class Main {
                static void myMethod(String name, int age) {
                System.out.println(name + age)
            }

                public static void main(String[] args){
                    myMethod('GGG', 25);
                }
            }
    
    Return values
        The void keyword, indicates that the method should not return a value.
        If you want the method to return a value, you can use a primitive data type (such as int, char, etc.) 
            instead of void, and use the return keyword inside the method:

        public class Main{
            static String myMethod(String name){
                return name
            }

            public static void main(String[] args){
                System.out.println(myMethod("GGG"));
            }
        }

        //Example with Conditionals
        public class App{
            static String myMethod(int age, String name){
                if(age <= 18){
                    return "Welcome! " + name;
                } else {
                    return "not welcome";
                }
            }

            public static void main(String[] args){
                System.out.println(myMethod(18, "G"));
            }
        }
    
    Method overloading
        Multiple methods can have the same name with different parameters
        Instead of defining two methods that should do the same thing, it is better to overload one.
        Multiple methods can have the same name as long as the number and/or type of parameters are different.

    Scope
        scope refers to the area of the program where a variable or method is accessible. 
        Java has two main types of scopes: global scope and local scope.

        Local Scope
            A block of code refers to all of the code between curly braces {}.
            Variables and methods that are declared inside a method or a block of code are said to have a local scope.

        Global Scope
            These variables and methods can be accessed from anywhere within the class. 
            Global variables are created using the static keyword, and they are available to all instances of the class.


    Recursion
        Its a java technique where a method can call itself.
        Infinite recursion is when the function never stops calling itself.

        public static int factorial(int n) {
            if (n == 0) {
                return 1;
            } else {
                return n * factorial(n-1);
            }
        }

        Halting Condition
            Every recursive function should have a halting condition, which is the condition where the function stops calling itself.
