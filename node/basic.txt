//Node
Javascript runtime server

//REPL
Read Evaluate Print Loop
Take single expressions on user inputs and returns the result
back to the console after executions.

//Process
Object
It provides information about and control over the current
Node process.

-Process.arg
Returns an array containing the command-line arguments passed when 
the Node.js process was launched.

//Bindings
libraries that "bind" two different programming languages so that code 
written in one language can be used in code written in another library. 
With the presence of bindings, you don't have to write all the code again 
just because they are in different languages.

//Asynchronus and Synchronous
In coding, synchronous operations are performed one at a time. 
One task finishes, the next step begins. Asynchronous operations can happen 
at the same time — you can move to the next step while another step finishes.
Javascript is Synchronous by deafult. But callbacks, Ajax, and Node, are Asynchronous.

//Thread
A thread is an execution context, which is all the information a CPU needs 
to execute a stream of instructions.
Suppose you're reading a book, and you want to take a break right now, 
but you want to be able to come back and resume reading from the exact 
point where you stopped. One way to achieve that is by jotting down the 
page number, line number, and word number. So your execution context 
for reading a book is these 3 numbers.
Threads are different from processes. A thread is a context of execution, 
while a process is a bunch of resources associated with a computation. 
A process can have one or many threads.

//Event Loop
Whenever we run a Node program, a thread is automatically created. 
This thread is the only place where our entire codebase is going to be executed. 
Inside of it, something called the event loop is generated. The role of this 
loop is to schedule which operations our only thread should be performing at 
any given point in time.
Event loop is an endless loop, which waits for tasks, executes them and then 
sleeps until it receives more tasks.

-The event loop executes tasks from the event queue only when the call stack 
is empty i.e. there is no ongoing task.
The event loop allows us to use callbacks and promises.
The event loop executes the tasks starting from the oldest first.

//Events
Node.js has a built-in module, called "Events", where you can create-, 
fire-, and listen for- your own events.

To include the built-in Events module use the require() method. 
In addition, all event properties and methods are an instance of 
an EventEmitter object.

-on()
The on() method requires name of the event to handle and callback 
function which is called when an event is raised.


//Modules
Reuse existing code
Organize code
Expose only what will be use
To export -> module.export = something;
To import -> const something = require('something');


//NPM
Node package module
Modules are libraries for Node.js.
A package is one or more modules (libraries) 
grouped (or packaged) together. These are commonly 
used by other packages or a project of your own. 
Node.js uses a package manager, where you can find 
and install thousands of packages.

//Semantic versioning

Semantic versioning is a formal convention for determining the 
version number of new software releases. The standard helps software 
users to understand the severity of changes in each new distribution.
A project that uses semantic versioning will advertise a Major, 
Minor and Patch number for each release.

//csv
A comma-separated values (CSV) file is a delimited text file that 
uses a comma to separate values. Each line of the file 
is a data record.

//fs.createReadStream
allows you to open up a readable stream in a very simple manner. 
All you have to do is pass the path of the file to start 
streaming in. It turns out that the response (as well as the request) 
objects are streams.

//DNS
Domain Name System
DNS, or the Domain Name System, translates human readable domain names 
(for example, www.amazon.com) to machine readable IP addresses 
(for example, 192.0.2.44).

//HTTP
Hyper Text Transfer Protocol
Is used to load pages on the Internet using hyperlinks.
As a request-response protocol, HTTP gives users a way to 
interact with web resources such as HTML files by transmitting 
hypertext messages between clients and servers. HTTP clients 
generally use Transmission Control Protocol (TCP) connections 
to communicate with servers.

//API
Application Programming Interface
API is the acronym for Application Programming Interface, which is a 
software intermediary that allows two applications to talk to each other. 
Each time you use an app like Facebook, send an instant message, or 
check the weather on your phone, you’re using an API.