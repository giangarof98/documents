Data Types

    Fundamental Data Types
        Numeric
            int
                integer
                1 2 3 4 5 0
                print(5-4)
                output: 1
            float
                floating point number
                number with decimal point
                0.5 0.4 0.9 0.00003 7.8
            complex
                consists of two values, the first one is real and the second one is the imaginary one of the number

        Sequence Type
            string
                Whatever inside of single '' or double quotes "". In other cases, using ''' - ''' quote
            list
                Mutable
                Stored inside brackets
                Order sequence of objects
                    Matrix
                        Multidimensional lists
                Unpacking list is like destructuring
            tuple
                Ordered data
                Allow duplication
                Inmutable list
                Stored inside of round brackets

        Boolean
            true
            false
        
        Dictionaries
            Stored inside of curly brackets
            don't has a sorted order
            Data structure and Data Type
            A way to organize data
            Have key:value

        Set
            Stored inside of curly brackets
            unordered, unchangeable, unindexed
            only store unique values, dont allow duplication

        
    
    Classes
        custom types

    Specialized Data Types

    Comprehension
        Concise and expressive way to create new lists, dictionaries, and sets, they are faster and more readable than equivalent loops
            List
                [expression for item in iterable]

                numbers = [1, 2, 3, 4, 5]
                squared_numbers = [x**2 for x in numbers]
                print(squared_numbers)

            Set
                A set comprehension has a similar syntax, but it creates a new set, with unique elements
                    {expression for item in iterable}

            Dictionaries
                A dictionary comprehension has a similar syntax, but it creates a new dictionary by 
                    using the expression to create the keys, and the item to create the values
                        {expression: item for item in iterable}

