Functions

    define a function with def keyword
        def some_func(param1, param2):                <- parameters
            print('function')
        some_func(arg1, arg2)                     <- arguments


        Parameters
            Placeholders for the actual values the function needs

        Arguments
            Is the value that are sent to the function when it is called.

        Default Parameters
            defined with a fallback value as a default argument. 
            Such parameters are optional during a function call. 
            If no argument is provided, the default value is used, 
            and if an argument is provided, it will overwrite the default value.

        Keyword Arguments
            When passed into a function, are identifiable by specific parameter names


        Return Statement
            Use inside a function or method to send the functionâ€™s result back to the caller

        
        Methods
            Associated with object/classes.

        Functions
            Set of instructions or procedures to perform a specific task,


        *args
            allows us to pass a variable number of non-keyword arguments to a Python function.

        **kwargs
            variable number of keyword arguments as a dictionary.

        General rule:  inside the parameter 
            def func(name, *args, default param, **kwargs):
                //return some task
            
            func(...)


        Scope
            Variable access for the function

            Global Scope
                Defined outside of a function but all the functions can access it
                Global Keyword
                    Allows you to change a variable value outside of its current scope

            Local Scope
                Defined inside a function body
                Nonlocal Keyword
                    Allows you to change a variable value outside of its current scope.
                    Override varible value

            General rule: 
                The function will start looking for local scope. if not a Parent local scope


        Nested Function
            Function inside another Function

        Pure Function
            Is a function that, given the same inputs, will always return the same output and have no other side effects. 
                A pure function only depends on its inputs and does not modify any external state or data.


        Built-in functions
            map():
                It takes two parameters, 
                    map(action(), iterable parameter)
                returns an object of map class

            filter():
                It takes two parameters, 
                    map(action(), iterable parameter)
                Filter the list, and return a new list with the condition specified

            zip():
                returns a zip object, which is an iterator of tuples where the first item in each passed iterator is paired together

            reduce():
                operates on any iterable
                It takes two parameters, 
                    map(action(), iterable parameter)

            bin()
            enumerate()
            range()
            slice()
            type()
            complex()
